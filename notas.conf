#try 
O bloco try permite que você escreva código que pode causar erros, sem interromper a execução do programa. 

#Exception
O bloco except é executado se ocorrer uma exceção no bloco try

#Self 
permite acessar os atributos e métodos do objeto que está sendo manipulado

#__init__
Ele é automaticamente chamado toda vez que uma nova instância de uma classe é criada, servindo para inicializar o objeto com atributos ou executar qualquer outra configuração inicial necessária.

#Atributo privado
Um atributo privado em Python é um atributo de uma classe que é intencionalmente ocultado do acesso direto fora da classe.

#Atributo publico
Um atributo público é um atributo de uma classe em Python que está acessível diretamente de fora da classe, sem restrições de visibilidade. 

#Match case
Basicamente esta estrutura facilita a escrita do seu código quando você precisa colocar muitas condições.

#super()
Herda elementos da classe pai, quando há uma classe filha

#return
Quando uma função é chamada, ela pode processar dados e, ao final de sua execução, retornar um valor específico utilizando returnAssociação: Classes que se utilizam mutuamente, mas são independentes (ex: Cliente e Banco).
Agregação: Relação onde uma classe contém referências a outras, mas essas podem existir separadamente (ex: Banco e Cliente, Cliente e Conta).
Composição: Relação onde uma classe contém outra de forma que a existência da parte depende da existência do todo (ex: Conta e Extrato).
Encapsulamento: Ocultação de detalhes internos e exposição controlada de atributos e métodos (ex: atributos privados em Cliente).
Herança: Reutilização de código através de classes que herdam atributos e métodos de outras classes (ex: ContaCorrente e ContaPoupanca herdam de Conta).
Polimorfismo: Uso de métodos comuns que podem ser implementados de maneiras diferentes em classes diferentes (ex: depositar e sacar em ContaCorrente e ContaPoupanca). (ele salva o valor)

#poo
Encapsulamento: Refere-se ao conceito de esconder os detalhes internos de uma classe e expor apenas o necessário através de métodos públicos. Isso protege o estado interno do objeto.
Herança: Permite que uma nova classe herde atributos e métodos de uma classe existente, promovendo a reutilização de código. A classe que herda é chamada de "subclasse" e a classe de onde herda é chamada de "superclasse".
Polimorfismo: Permite que métodos de diferentes classes possam ser chamados de maneira similar, mesmo que suas implementações sejam diferentes. Isso é feito, por exemplo, através de métodos sobrescritos nas subclasses.
Abstração: Foca em esconder a complexidade e mostrar apenas as características relevantes de um objeto. Isso é feito através de classes abstratas e interfaces.
Agregação: A classe Banco mantém uma lista de Cliente, indicando que um banco tem clientes. No entanto, um cliente pode existir sem estar diretamente associado a um banco específico.
Assosiação: a classe Cliente e a classe Banco têm uma relação de associação. A classe Cliente pode ser associada a um objeto da classe Banco através do método adicionar_cliente().
Composição:Na classe Conta, o objeto Extrato é uma composição, pois o extrato existe apenas no contexto de uma conta. Se a conta for excluída, o extrato correspondente também é excluído.

#2f
é uma especificação de formatação usada para formatar números de ponto flutuante (float) em Python.
na string formatada é usado para garantir que o valor numérico seja exibido com exatamente duas casas decimais

#4 pilares
    #abstração
    Abstração em Python é um princípio da programação orientada a objetos que oculta os detalhes de implementação e mostra apenas as funcionalidades essenciais de um objeto.
    Por exemplo, temos uma classe abstrata Forma com um método area(). As classes Circulo e Quadrado implementam esse método. Assim, podemos calcular a área de diferentes formas sem saber como cada cálculo é feito.
        ### exemplo de abstração ###
        from abc import ABC, abstractmethod

    class Animal(ABC):  # Classe abstrata
        @abstractmethod
        def som(self):
            pass

    class Cachorro(Animal):
        def som(self):
            return "Au Au!"

    class Gato(Animal):
        def som(self):
            return "Miau!"

    # Uso das classes
    animais = [Cachorro(), Gato()]

    for animal in animais:
        print(animal.som())
    ###---###


    #encapsulamento
        class ContaBancaria:
        def __init__(self, saldo):
            self._saldo = saldo  # Atributo protegido

        def depositar(self, valor):
            if valor > 0:
                self._saldo += valor

        def sacar(self, valor):
            if 0 < valor <= self._saldo:
                self._saldo -= valor

        def ver_saldo(self):
            return self._saldo
    
    #Herança
        class Animal:  # Classe base ou superclasse
            def __init__(self, nome):
                self.nome = nome

        def som(self):
            return "Som de algum animal"

        class Cachorro(Animal):  # Subclasse que herda de Animal
            def som(self):
                return "Au Au!"

        class Gato(Animal):  # Outra subclasse que herda de Animal
            def som(self):
                return "Miau!"

        # Uso das classes
        animais = [Cachorro("Rex"), Gato("Mimi")]

        for animal in animais:
            print(f"{animal.nome} faz: {animal.som()}")
    
    #poliformismo    
    class Animal:
        def fazer_som(self):
            pass

    class Cachorro(Animal):
        def fazer_som(self):
            return "Au Au"

    class Gato(Animal):
        def fazer_som(self):
            return "Miau"

    def emitir_som(animal):
        print(animal.fazer_som())

    # Exemplo de uso
    cachorro = Cachorro()
    gato = Gato()

    emitir_som(cachorro)  # Saída: Au Au
    emitir_som(gato)      # Saída: Miau

#classe
Uma classe é uma estrutura fundamental na programação orientada a objetos que serve como um modelo ou um template para criar objetos.